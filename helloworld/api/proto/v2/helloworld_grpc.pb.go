// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.10
// source: proto/v2/helloworld.proto

package v2

import (
	context "context"
	v1 "git.xq5.com/golang/helloworld/api/proto/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelloworldService_Login_FullMethodName    = "/helloworld.api.v2.HelloworldService/Login"
	HelloworldService_Logout_FullMethodName   = "/helloworld.api.v2.HelloworldService/Logout"
	HelloworldService_User_FullMethodName     = "/helloworld.api.v2.HelloworldService/User"
	HelloworldService_SayHello_FullMethodName = "/helloworld.api.v2.HelloworldService/SayHello"
)

// HelloworldServiceClient is the client API for HelloworldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloworldServiceClient interface {
	// user service
	Login(ctx context.Context, in *v1.LoginRequest, opts ...grpc.CallOption) (*v1.LoginResponse, error)
	// 登出接口
	Logout(ctx context.Context, in *v1.LogoutRequest, opts ...grpc.CallOption) (*v1.LogoutResponse, error)
	User(ctx context.Context, in *v1.UserRequest, opts ...grpc.CallOption) (*v1.UserInfo, error)
	// greeter service
	SayHello(ctx context.Context, in *v1.HelloworldRequset, opts ...grpc.CallOption) (*v1.HelloworldReply, error)
}

type helloworldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloworldServiceClient(cc grpc.ClientConnInterface) HelloworldServiceClient {
	return &helloworldServiceClient{cc}
}

func (c *helloworldServiceClient) Login(ctx context.Context, in *v1.LoginRequest, opts ...grpc.CallOption) (*v1.LoginResponse, error) {
	out := new(v1.LoginResponse)
	err := c.cc.Invoke(ctx, HelloworldService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) Logout(ctx context.Context, in *v1.LogoutRequest, opts ...grpc.CallOption) (*v1.LogoutResponse, error) {
	out := new(v1.LogoutResponse)
	err := c.cc.Invoke(ctx, HelloworldService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) User(ctx context.Context, in *v1.UserRequest, opts ...grpc.CallOption) (*v1.UserInfo, error) {
	out := new(v1.UserInfo)
	err := c.cc.Invoke(ctx, HelloworldService_User_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) SayHello(ctx context.Context, in *v1.HelloworldRequset, opts ...grpc.CallOption) (*v1.HelloworldReply, error) {
	out := new(v1.HelloworldReply)
	err := c.cc.Invoke(ctx, HelloworldService_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloworldServiceServer is the server API for HelloworldService service.
// All implementations must embed UnimplementedHelloworldServiceServer
// for forward compatibility
type HelloworldServiceServer interface {
	// user service
	Login(context.Context, *v1.LoginRequest) (*v1.LoginResponse, error)
	// 登出接口
	Logout(context.Context, *v1.LogoutRequest) (*v1.LogoutResponse, error)
	User(context.Context, *v1.UserRequest) (*v1.UserInfo, error)
	// greeter service
	SayHello(context.Context, *v1.HelloworldRequset) (*v1.HelloworldReply, error)
	mustEmbedUnimplementedHelloworldServiceServer()
}

// UnimplementedHelloworldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloworldServiceServer struct {
}

func (UnimplementedHelloworldServiceServer) Login(context.Context, *v1.LoginRequest) (*v1.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHelloworldServiceServer) Logout(context.Context, *v1.LogoutRequest) (*v1.LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedHelloworldServiceServer) User(context.Context, *v1.UserRequest) (*v1.UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedHelloworldServiceServer) SayHello(context.Context, *v1.HelloworldRequset) (*v1.HelloworldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloworldServiceServer) mustEmbedUnimplementedHelloworldServiceServer() {}

// UnsafeHelloworldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloworldServiceServer will
// result in compilation errors.
type UnsafeHelloworldServiceServer interface {
	mustEmbedUnimplementedHelloworldServiceServer()
}

func RegisterHelloworldServiceServer(s grpc.ServiceRegistrar, srv HelloworldServiceServer) {
	s.RegisterService(&HelloworldService_ServiceDesc, srv)
}

func _HelloworldService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloworldService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).Login(ctx, req.(*v1.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloworldService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).Logout(ctx, req.(*v1.LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloworldService_User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).User(ctx, req.(*v1.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.HelloworldRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloworldService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).SayHello(ctx, req.(*v1.HelloworldRequset))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloworldService_ServiceDesc is the grpc.ServiceDesc for HelloworldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloworldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.api.v2.HelloworldService",
	HandlerType: (*HelloworldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _HelloworldService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _HelloworldService_Logout_Handler,
		},
		{
			MethodName: "User",
			Handler:    _HelloworldService_User_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _HelloworldService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v2/helloworld.proto",
}
