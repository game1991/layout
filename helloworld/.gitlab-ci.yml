# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

#image: repository.zonst.com/devops/alpine:base_npc1

variables:
  GOPRIVATE: "git.xq5.com"
  GOPROXY: "https://goproxy.cn,direct"

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job: # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - shell
  script:
    - echo "Compiling the code to image..."
    - make docker
    - echo "Compile complete."
  only: # It only starts on main branch
    - main

unit-test-job: # This job runs in the test stage.
  stage: test # It only starts when the job in the build stage completes successfully.
  image: golang:1.19-bullseye
  tags:
    - docker
  before_script:
    - go env -w GOPRIVATE="git.xq5.com"
    - go env -w GOPROXY="https://goproxy.cn,direct"
    - go get -u golang.org/x/tools/cmd/goimports
    - go install golang.org/x/tools/cmd/goimports
    - export PATH=${PATH}:/go/bin
    - go get -u github.com/boumenot/gocover-cobertura
    - go install github.com/boumenot/gocover-cobertura # 用于merge时可以用红/绿色标识该行有没有被覆盖到
    - go get -u gotest.tools/gotestsum # 用于在流水线界面生成报告
    - go install gotest.tools/gotestsum
    - sed -i "s@http://deb.debian.org@http://mirrors.aliyun.com@g" /etc/apt/sources.list
    - rm -Rf /var/lib/apt/lists/*
    - apt-get update && apt install python3-pip -y
    - pip3 install diff_cover -i https://pypi.tuna.tsinghua.edu.cn/simple # 用于比较两次提交ut覆盖率的变动
    - go get -u github.com/axw/gocov/...
    - go install github.com/axw/gocov/gocov
    - go get -u github.com/AlekSi/gocov-xml
    - go install github.com/AlekSi/gocov-xml
  script:
    - if [ ${CI_COMMIT_BRANCH} == "main" ]; then COMPARE_BRANCH=main; else COMPARE_BRANCH=$CI_DEFAULT_BRANCH; fi
    - echo $COMPARE_BRANCH
    - git fetch --depth 1 origin $COMPARE_BRANCH #这几个都是gitlab ci默认定义的变量
    - git checkout ${CI_COMMIT_BRANCH}
    - ls -la
    - goimports -w ./
    - go fmt $(go list ./... | grep -v './vendor\|./dal\|./build\|./api\|./pkg/swagger\|./pkg/swagger-ui')
    - go vet $(go list ./... | grep -v './vendor\|./dal\|./build\|./api\|./pkg/swagger\|./pkg/swagger-ui')
    - gotestsum --junitfile report.xml --format testname -- -race -gcflags=-l -coverpkg=./... -coverprofile=count.out $(go list ./... | grep -v './vendor\|./dal\|./build\|./api\|./pkg/swagger\|./pkg/swagger-ui')
    #- go test $(go list ./... | grep -v /vendor/ | grep -v ./dal/ | grep -v ./api/) -coverprofile=count.out
    - go tool cover -func=count.out > coverage.txt
    - go tool cover -html=count.out -o coverage.html
    - tail -1 coverage.txt | awk '{printf "test coverage is %s\n", $3}'
    - gocover-cobertura -ignore-gen-files < count.out > cover.xml # 如果不加上面 export PATH这行，此处需要 /go/bin/gocover-cobertura
    - gocov convert count.out | gocov-xml > coverage.xml
    - diff-cover coverage.xml --compare-branch=origin/${COMPARE_BRANCH} --html-report report.html --fail-under=0
  artifacts:
    paths:
      - coverage.txt
      - coverage.html
      - report.html
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cover.xml
      junit: report.xml
  only: # It only starts on main branch
    - main

lint-test-job: # This job also runs in the test stage.
  stage: test # It can run at the same time as unit-test-job (in parallel).
  image: golang:latest
  tags:
    - docker
  script:
    - go get -u github.com/golangci/golangci-lint/cmd/golangci-lint
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint
    # - golangci-lint run --timeout=30s --out-format=html > golangci-lint-report.html || true
    - golangci-lint run --timeout=15m
deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  tags:
    - shell
  environment: test
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
